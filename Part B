////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project 
//** NAME: Xio Pelaez Cuacua & Gizelle Ojeda-Ericksen
//** RIN: 662068537 & 662065015
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

// We'll always add this include statement. This basically takes the
// code contained within the "engr_2350_msp432.h" file and adds it here.
#include "engr2350_msp432.h"

// Add function prototypes here as needed.
void GPIO_Init();
void Timer_Init();

// Add global variables here as needed.
//uint8_t biLED = 0; // **used bit masking** PIN 6.0 & 6.1
uint8_t PB1; // PIN 5.6
uint8_t BMP0;
uint8_t BMP1;
uint8_t BMP2;
uint8_t BMP3;
uint8_t BMP4;
uint8_t BMP5;
uint8_t RED;
uint8_t GREEN;
uint8_t BLUE;
Timer_A_UpModeConfig config;

int main( void ) {    /** Main Function ****/

    // Add local variables here as needed.

    // We always call the SysInit function first to set up the
    // microcontroller for how we are going to use it.
    SysInit();
    GPIOInit();

    Timer_Init();
    printf("\r\n\n"
           "===========\r\n"
           "Lab 2 Start\r\n"
           "===========\r\n");
    printf("\r\n\n"
            "In this game, there are 10 rounds where the LED will light up \r\n"
            "and you will have to press the corresponding bumper button to \r\n"
            "the color. You start with one color and it will increase each \r\n"
            "round by one. Press the wrong color, start all over. Press the\r\n"
            "right one, continue until the 10th round and win!\r\n"
            "======================\r\n"
            "Press button to start!\r\n"
            "======================\r\n");
    // Place initialization code (or run-once) code here

    while( 1 ) {  // Place code that runs continuously in here

        P6DIR |= 0x03; // Set P6.0 and P6.1 (led)
        P2DIR |= 0X07; // RGB LED

        PB1 = GPIO_getInputPinValue(GPIO_PORT_P5,GPIO_PIN6);
        BMP0 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN0);
        BMP1 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN2);
        BMP2 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN3);
        BMP3 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN5);
        BMP4 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN6);
        BMP5 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN7);

        RED = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN0);
        GREEN = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN1);
        BLUE = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN2);


        if(!BMP0){
            __delay_cycles(240e3);
            printf("Red\r\n");
            //P2OUT |= 0x01;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
            while(!BMP0){
               BMP0 = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN0);
               if(!BMP0) {
                   GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
               }
           }
            __delay_cycles(240e3);

        }else if(!BMP1){
            __delay_cycles(240e3);
            printf("Green\r\n");
            //P2OUT |= 0x02;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
            while(!BMP1){
               BMP1 = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN1);
               if(!BMP1) {
                   GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
               }
           }
            __delay_cycles(240e3);
        }else if(!BMP2){
            __delay_cycles(240e3);
            printf("Blue\r\n");
            //P2OUT |= 0x04;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2);
            __delay_cycles(240e3);

        }else if(!BMP3){
            __delay_cycles(240e3);
            printf("Yellow\r\n");
            //P2OUT |= 0x03;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0); //red pin
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); // green pin
            __delay_cycles(240e3);

        }else if(!BMP4){
            __delay_cycles(240e3);
            printf("Purple or Magenta\r\n");
            //P2OUT |= 0x05;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0); //red pin
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //blue pin
            __delay_cycles(240e3);

        }else if(!BMP5){
            __delay_cycles(240e3);
            printf("Cyan or Light Blue\r\n");
            //P2OUT |= 0x06;
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); //green
            GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //blue
            __delay_cycles(240e3);

        }else{
            GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
            GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
            GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);

        }


    }
}    /** End Main Function ****/   

// Add function declarations here as needed
void GPIOInit(){
    P6DIR |= 0x03; // Set P6.0 and P6.1 (led)
    P2DIR &= ~0X07; // RGB LED

    PB1 = GPIO_getInputPinValue(GPIO_PORT_P5,GPIO_PIN6);
    BMP0 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN0);
    BMP1 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN2);
    BMP2 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN3);
    BMP3 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN5);
    BMP4 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN6);
    BMP5 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN7);

    RED = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN0);
    GREEN = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN1);
    BLUE = GPIO_getInputPinValue(GPIO_PORT_P2,GPIO_PIN2);

}

void Timer_Init() {
//    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
  //  config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_64;
    //config.timerPeriod = 240e3240e3;
    //Timer_A_configureUpMode(TIMER_A2_BASE, &config);
    //Timer_A_startCounter(TIMER_A2_BASE, TIMER_A_UP_MODE);
    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_16;
    config.timerPeriod = 15000;
    Timer_A_configureUpMode(TIMER_A2_BASE, &config);
    Timer_A_startCounter(TIMER_A2_BASE, TIMER_A_UP_MODE);
}
// Add interrupt functions last so they are easy to find

