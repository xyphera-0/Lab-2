
////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project 
//** NAME: Xio Pelaez Cuacua & Gizelle Ojeda-Ericksen
//** RIN: 662068537 & 662065015
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

// We'll always add this include statement. This basically takes the
// code contained within the "engr_2350_msp432.h" file and adds it here.
#include "engr2350_msp432.h"

// Add function prototypes here as needed.
void GPIO_Init();
void Timer_Init();
void Timer_ISR();

// Add global variables here as needed.
//uint8_t biLED = 0; // **used bit masking** PIN 6.0 & 6.1
uint8_t PB1; // PIN 5.6
uint8_t BMP0, BMP1, BMP2, BMP3, BMP4, BMP5;
uint32_t gamePattern[10];
uint32_t rand();
Timer_A_UpModeConfig config;
uint8_t counter = 0; // For toggling the LED
uint8_t flag = 0;
uint8_t colorCounter = 0;

int main( void ) {    /** Main Function ****/

    // Add local variables here as needed.

    // We always call the SysInit function first to set up the
    // microcontroller for how we are going to use it.
    SysInit();
    GPIO_Init();
    Timer_Init();

    Timer_A_startCounter(TIMER_A2_BASE, TIMER_A_UP_MODE);

    printf("\r\n\n"
           "===========\r\n"
           "Lab 2 Start\r\n"
           "===========\r\n");
    printf("\r\n\n"
            "In this game, there are 10 rounds where the LED will light up \r\n"
            "and you will have to press the corresponding bumper button to \r\n"
            "the color. You start with one color and it will increase each \r\n"
            "round by one. Press the wrong color, start all over. Press the\r\n"
            "right one, continue until the 10th round and win!\r\n\n\n"
            "======================\r\n"
            "Press button to start!\r\n"
            "======================\r\n");
    // Place initialization code (or run-once) code here

    uint8_t i;
    for(i = 0; i < 10; i++){
        gamePattern[i] = rand() % 6;
    }// generates the numbers corresponding to the bumbers

    while( 1 ) {  // Place code that runs continuously in here

        if(!PB1){ // if not pressed, allows to figure colors out
            P6OUT &= ~0x03; //biLED is off
            BMP0 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN0);
            BMP1 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN2);
            BMP2 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN3);
            BMP3 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN5);
            BMP4 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN6);
            BMP5 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN7);
            PB1 =  GPIO_getInputPinValue(GPIO_PORT_P5,GPIO_PIN6);

            if(!BMP0){
                __delay_cycles(240e3);
                printf("Red\r\n");
                //P2OUT |= 0x01;
                //GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
                while(!BMP0){
                   //printf("PRESSEDDDD");
                   GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
                   BMP0 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN0);
               }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);


            }else if(!BMP1){
                __delay_cycles(240e3);
                printf("Green\r\n");
                //P2OUT |= 0x02;
                //GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
                while(!BMP1){
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
                   BMP1 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN2);
               }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);

            }else if(!BMP2){
                __delay_cycles(240e3);
                printf("Blue\r\n");
                //P2OUT |= 0x04;
                while(!BMP2){
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2);
                   BMP2 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN3);
                }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);

            }else if(!BMP3){
                __delay_cycles(240e3);
                printf("Yellow\r\n");
                //P2OUT |= 0x03;
                while(!BMP3){
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0); //red pin
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); // green pin
                   BMP3 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN5);
               }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

            }else if(!BMP4){
                __delay_cycles(240e3);
                printf("Purple or Magenta\r\n");
                //P2OUT |= 0x05;
                while(!BMP4){
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0); //red pin
                    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //blue pin
                   BMP4 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN6);
               }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

            }else if(!BMP5){
                __delay_cycles(240e3);
                printf("Cyan or Light Blue\r\n");
                //P2OUT |= 0x06;
                   while(!BMP5){
                       GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); //green
                       GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //blue
                       BMP5 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN7);
                   }
                __delay_cycles(240e3);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
                GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);

            }

        }

    }
}    /** End Main Function ****/

// Add function declarations here as needed
void GPIO_Init(){
    P6DIR |= 0x03; // Set P6.0 and P6.1 (led)
    P2DIR |= 0X07; // RGB LED
    GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P4, GPIO_PIN0 | GPIO_PIN2 | GPIO_PIN3 | GPIO_PIN5 | GPIO_PIN6 | GPIO_PIN7);
    PB1 = GPIO_getInputPinValue(GPIO_PORT_P5,GPIO_PIN6);
    BMP0 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN0);
    BMP1 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN2);
    BMP2 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN3);
    BMP3 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN5);
    BMP4 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN6);
    BMP5 = GPIO_getInputPinValue(GPIO_PORT_P4,GPIO_PIN7);
    __delay_cycles(240e3);
}

void Timer_Init() {
    config.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    config.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_64;
    config.timerPeriod = 18750; //elapses every 50ms
    config.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_ENABLE;
    Timer_A_configureUpMode(TIMER_A2_BASE, &config);
    Timer_A_startCounter(TIMER_A2_BASE, TIMER_A_UP_MODE);
    Timer_A_registerInterrupt(TIMER_A2_BASE,TIMER_A_CCRX_AND_OVERFLOW_INTERRUPT ,Timer_ISR);
}

void Timer_ISR(){

    Timer_A_clearInterruptFlag(TIMER_A2_BASE);
    counter++;
    if(PB1){ //button pressed, game starts
            printf("BUTTON PRESSED");
            __delay_cycles(240e3);
            P6OUT |= 0x01;
            P6OUT &= ~0x02; //Light is Red while pattern is displaying
            uint8_t i;
            for(i = 0; i < 10; i++) {
                if(gamePattern[i] == 0) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);//turn on red
                        printf("RED\r\n");
                        colorCounter++;
                        __delay_cycles(240e3);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
                        counter = 0;
                    }
                }else if(gamePattern[i] == 1) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); //turn on green
                        printf("GREEN\r\n");
                        colorCounter++;
                        __delay_cycles(240e3);
                       GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
                        counter = 0;
                    }
                }else if(gamePattern[i] == 2) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //turn on blue
                        printf("BLUE\r\n");
                        colorCounter++;
                        __delay_cycles(240e3);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
                        counter = 0;
                    }
                }else if(gamePattern[i] == 3) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1); //turn on yellow
                        printf("YELLOW\r\n");
                        colorCounter++;
                        __delay_cycles(240e3);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
                        counter = 0;
                    }
                }else if(gamePattern[i] == 4) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0); //red pin
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //turn on pink
                        printf("PURPLE\r\n");
                        colorCounter++;
                        __delay_cycles(240e3);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
                        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
                        counter = 0;
                    }
                }else if(gamePattern[i] == 5) {
                    if(counter == 10){
                        GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
                       GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN2); //turn on cyan
                       printf("CYAN\r\n");colorCounter++;
                       __delay_cycles(240e3);
                       colorCounter++;
                       GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
                       GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
                       counter = 0;
                    }
                }
            }
            if(colorCounter == 10){
                Timer_A_stopTimer(TIMER_A2_BASE);
                colorCounter = 0;
            }


            __delay_cycles(240e3);
        }


}
// Add interrupt functions last so they are easy to find
